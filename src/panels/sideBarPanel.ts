import * as vscode from 'vscode';
import { getUri } from '../utilities/getUri'; // Your utility for fetching URIs
import { getNonce } from '../utilities/getNonce'; // Your utility for security

export class SidebarPanel implements vscode.WebviewViewProvider {
  public static readonly viewType = 'sample-sidebar';
  private _view?: vscode.WebviewView;
  private _disposables: vscode.Disposable[]=[]

  constructor(private readonly extensionUri: vscode.Uri) {}

  // This is called when the sidebar is activated
  resolveWebviewView(webviewView: vscode.WebviewView): void {
    this._view = webviewView;

    // Allow JS in the webview
    webviewView.webview.options = {
      enableScripts: true,
      localResourceRoots: [vscode.Uri.joinPath(this.extensionUri, 'out'), vscode.Uri.joinPath(this.extensionUri, 'webview-ui/build')]
    };

    // Set the HTML content of the sidebar
    webviewView.webview.html = this._getWebviewContent(webviewView.webview);

    // Set message listener for interactivity between webview and extension
    this._setWebviewMessageListener(webviewView.webview);
  }

  // Define the HTML structure for the sidebar webview (including React app)
  private _getWebviewContent(webview: vscode.Webview): string {
    const nonce = getNonce();

    // Path to styles and script generated by React/Vite
    const stylesUri = getUri(webview, this.extensionUri, ['webview-ui', 'build', 'assets', 'index.css']);
    const scriptUri = getUri(webview, this.extensionUri, ['webview-ui', 'build', 'assets', 'sidebar.js']);

    return /*html*/ `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';">
        <link href="${stylesUri}" rel="stylesheet">
        <title>Sidebar</title>
      </head>
      <body>
        <div id="root"></div>
        <script type="module" nonce="${nonce}" src="${scriptUri}"></script>
      </body>
      </html>
    `;
  }

  // Add message handling between the sidebar and the extension
  private _setWebviewMessageListener(webview: vscode.Webview) {
    webview.onDidReceiveMessage(
      (message: any) => {
        const command = message.command;
        const text = message.text;
        console.log("command ::", message.command, message.text)

        switch (command) {
          case "hello":
            // Code that should run in response to the hello message command
            vscode.window.showInformationMessage(text);
            return;
          // Add more switch case statements here as more webview message commands
          // are created within the webview context (i.e. inside media/main.js)
        }
      },
      undefined,
      this._disposables
    );
  }
}
